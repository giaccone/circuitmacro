\ProvidesPackage{circuitmacro}[2025/07/28 circuit 0.01]
% this package provide macros based on circuitikz from some
% default settings (e.g. straight voltages, etc...)

% required packages
\RequirePackage{circuitikz}
\RequirePackage{xstring}

% circuitikz settings
\usetikzlibrary{decorations.pathmorphing}
\ctikzset{label/align = straight}
\ctikzset{voltage = straight}
\ctikzset{bipoles/thickness=3}
\ctikzset{bipoles/cuteswitch/thickness=0.5}


%----------------------------
% Resistor
%----------------------------
\NewDocumentCommand{\R}{s o m m m}{
    % --------------------------------------------------------------------------
    % \R — Resistor
    %
    % Syntax:
    %   \R[*][<circuitikz options>]{<from>}{<to>}{<label>}
    %
    % Description:
    %   Draws a resistor between two coordinates in a Circuitikz diagram, with an
    %   optional label and styling options. The label can be placed either above
    %   or below the resistor depending on whether the first argument is starred.
    %
    % Arguments:
    %   * (optional star)         — If present, the label is placed below the resistor
    %                                (`l_=` in Circuitikz); otherwise, it is placed
    %                                above (`l=`).
    %   [<circuitikz options>]    — (Optional) Key-value options passed directly to 
    %                                the Circuitikz `R` element, e.g., `-*`, `color=red`.
    %   {<from>}          — Coordinates of the starting terminal, e.g., `0,0`.
    %   {<to>}            — Coordinates of the ending terminal, e.g., `2,0`.
    %   {<label>}                 — Mathematical label for the resistor, e.g., `R_1`.
    %
    % Behaviour:
    %   - If no [<circuitikz options>] are given, uses the default resistor symbol.
    %   - Starred form inverts label position (below the element).
    %   - Automatically applies `l=` or `l_=` to match label placement.
    %
    % Example:
    %   \begin{circuitikz}
    %       \R{0,0}{2,0}{R}
    %       \R*{0,-1}{2,-1}{R_L}
    %       \R[*][color=red]{0,-2}{2,-2}{R_s}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be given without parentheses.
    %   - The label is always typeset in math mode.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 06.08.2025
    % --------------------------------------------------------------------------

    % get coordinates
    \coordinate (from) at (#3);
    \coordinate (to) at (#4);
    
    \IfBooleanTF{#1}{
        % put the resistor with or without optional parameters
	    \IfNoValueTF{#2}{\draw (from) to[R, l_=$#5$] (to);}{\draw (from) to[R, l_=$#5$, #2] (to);}
    }{
        % put the resistor with or without optional parameters
	    \IfNoValueTF{#2}{\draw (from) to[R, l=$#5$] (to);}{\draw (from) to[R, l=$#5$, #2] (to);}
    }
}

%----------------------------
% Inductor
%----------------------------
\RenewDocumentCommand{\L}{s o m m m}{
	% --------------------------------------------------------------------------
    % \L — Inductor
    %
    % Syntax:
    %   \L[*][<circuitikz options>]{<from>}{<to>}{<label>}
    %
    % Description:
    %   Draws a inductor between two coordinates in a Circuitikz diagram, with an
    %   optional label and styling options. The label can be placed either above
    %   or below the inductor depending on whether the first argument is starred.
    %
    % Arguments:
    %   * (optional star)         — If present, the label is placed below the inductor
    %                                (`l_=` in Circuitikz); otherwise, it is placed
    %                                above (`l=`).
    %   [<circuitikz options>]    — (Optional) Key-value options passed directly to 
    %                                the Circuitikz `R` element, e.g., `-*`, `color=red`.
    %   {<from>}          — Coordinates of the starting terminal, e.g., `0,0`.
    %   {<to>}            — Coordinates of the ending terminal, e.g., `2,0`.
    %   {<label>}                 — Mathematical label for the inductor, e.g., `R_1`.
    %
    % Behaviour:
    %   - If no [<circuitikz options>] are given, uses the default inductor symbol.
    %   - Starred form inverts label position (below the element).
    %   - Automatically applies `l=` or `l_=` to match label placement.
    %
    % Example:
    %   \begin{circuitikz}
    %       \L{0,0}{2,0}{L}
    %       \L*{0,-1}{2,-1}{L_1}
    %       \L[*][color=red]{0,-2}{2,-2}{L_s}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be given without parentheses.
    %   - The label is always typeset in math mode.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 06.08.2025
    % ----------------------------------------------------------------
    % get coordinates
    \coordinate (from) at (#3);
    \coordinate (to) at (#4);
    
    \IfBooleanTF{#1}{
        % put the inductor with or without optional parameters
	    \IfNoValueTF{#2}{\draw (from) to[L, l_=$#5$] (to);}{\draw (from) to[L, l_=$#5$, #2] (to);}
    }{
        % put the inductor with or without optional parameters
	    \IfNoValueTF{#2}{\draw (from) to[L, l=$#5$] (to);}{\draw (from) to[L, l=$#5$, #2] (to);}
    }
}

%----------------------------
% Capacitor
%----------------------------
\NewDocumentCommand{\C}{s o m m m}{
	% --------------------------------------------------------------------------
    % \C — Capacitor
    %
    % Syntax:
    %   \C[*][<circuitikz options>]{<from>}{<to>}{<label>}
    %
    % Description:
    %   Draws a capacitor between two coordinates in a Circuitikz diagram, with an
    %   optional label and styling options. The label can be placed either above
    %   or below the capacitor depending on whether the first argument is starred.
    %
    % Arguments:
    %   * (optional star)         — If present, the label is placed below the capacitor
    %                                (`l_=` in Circuitikz); otherwise, it is placed
    %                                above (`l=`).
    %   [<circuitikz options>]    — (Optional) Key-value options passed directly to 
    %                                the Circuitikz `R` element, e.g., `-*`, `color=red`.
    %   {<from>}          — Coordinates of the starting terminal, e.g., `0,0`.
    %   {<to>}            — Coordinates of the ending terminal, e.g., `2,0`.
    %   {<label>}                 — Mathematical label for the capacitor, e.g., `R_1`.
    %
    % Behaviour:
    %   - If no [<circuitikz options>] are given, uses the default capacitor symbol.
    %   - Starred form inverts label position (below the element).
    %   - Automatically applies `l=` or `l_=` to match label placement.
    %
    % Example:
    %   \begin{circuitikz}
    %       \C{0,0}{2,0}{C}
    %       \C*{0,-1}{2,-1}{C_1}
    %       \C[*][color=red]{0,-2}{2,-2}{C_s}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be given without parentheses.
    %   - The label is always typeset in math mode.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 06.08.2025
    % ----------------------------------------------------------------
    % get coordinates
    \coordinate (from) at (#3);
    \coordinate (to) at (#4);
    
    \IfBooleanTF{#1}{
        % put the capacitor with or without optional parameters
	    \IfNoValueTF{#2}{\draw (from) to[C, l_=$#5$] (to);}{\draw (from) to[C, l_=$#5$, #2] (to);}
    }{
        % put the capacitor with or without optional parameters
	    \IfNoValueTF{#2}{\draw (from) to[C, l=$#5$] (to);}{\draw (from) to[C, l=$#5$, #2] (to);}
    }
}

%----------------------------
% Impedance
%----------------------------
\NewDocumentCommand{\B}{s o m m m}{
	% --------------------------------------------------------------------------
    % \B — Bipole (impedance)
    %
    % Syntax:
    %   \B[*][<circuitikz options>]{<from>}{<to>}{<label>}
    %
    % Description:
    %   Draws a bipole between two coordinates in a Circuitikz diagram, with an
    %   optional label and styling options. The label can be placed either above
    %   or below the bipole depending on whether the first argument is starred.
    %
    % Arguments:
    %   * (optional star)         — If present, the label is placed below the bipole
    %                                (`l_=` in Circuitikz); otherwise, it is placed
    %                                above (`l=`).
    %   [<circuitikz options>]    — (Optional) Key-value options passed directly to 
    %                                the Circuitikz `R` element, e.g., `-*`, `color=red`.
    %   {<from>}          — Coordinates of the starting terminal, e.g., `0,0`.
    %   {<to>}            — Coordinates of the ending terminal, e.g., `2,0`.
    %   {<label>}                 — Mathematical label for the bipole, e.g., `R_1`.
    %
    % Behaviour:
    %   - If no [<circuitikz options>] are given, uses the default bipole symbol.
    %   - Starred form inverts label position (below the element).
    %   - Automatically applies `l=` or `l_=` to match label placement.
    %
    % Example:
    %   \begin{circuitikz}
    %       \B{0,0}{2,0}{\bar{Z}}
    %       \B*{0,-1}{2,-1}{\bar{Z}_1}
    %       \B[*][color=red]{0,-2}{2,-2}{\bar{Z}_2}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be given without parentheses.
    %   - The label is always typeset in math mode.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 06.08.2025
    % ----------------------------------------------------------------
    % get coordinates
    \coordinate (from) at (#3);
    \coordinate (to) at (#4);
    
    \IfBooleanTF{#1}{
        % put the bipole with or without optional parameters
	    \IfNoValueTF{#2}{\draw (from) to[generic, l_=$#5$] (to);}{\draw (from) to[generic, l_=$#5$, #2] (to);}
    }{
        % put the bipole with or without optional parameters
	    \IfNoValueTF{#2}{\draw (from) to[generic, l=$#5$] (to);}{\draw (from) to[generic, l=$#5$, #2] (to);}
    }
}

%----------------------------
% Switch Open
%----------------------------
\NewDocumentCommand{\SwOpen}{s o m m m}{
    % --------------------------------------------------------------------------
    % \SwOpen — Open Switch with Label
    %
    % Syntax:
    %   \SwOpen[*][<circuitikz options>]{<from>}{<to>}{<label>}
    %
    % Description:
    %   Draws an open switch (`cute closing switch` style in Circuitikz) between
    %   two coordinates, with an optional label and styling options. The label
    %   can be placed above or below the switch depending on whether the first
    %   argument is starred.
    %
    % Arguments:
    %   * (optional star)         — If present, the label is placed below the switch
    %                                (`l_=` in Circuitikz); otherwise, it is placed
    %                                above (`l=`).
    %   [<circuitikz options>]    — (Optional) Key-value options passed directly to 
    %                                the Circuitikz switch element, e.g., `-*`, `color=red`.
    %   {<from>}          — Coordinates of the starting terminal, e.g., `0,0`.
    %   {<to>}            — Coordinates of the ending terminal, e.g., `2,0`.
    %   {<label>}                 — Mathematical label for the switch, e.g., `S_1`.
    %
    % Behaviour:
    %   - If no [<circuitikz options>] are given, uses the default `cute closing switch` style.
    %   - Starred form inverts label position (places it below the element).
    %   - Automatically applies `l=` or `l_=` to match label placement.
    %
    % Example:
    %   \begin{circuitikz}
    %       \SwOpen{0,0}{2,0}{S}
    %       \SwOpen*{0,-1}{2,-1}{S_L}
    %       \SwOpen[*][color=blue]{0,-2}{2,-2}{S_s}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be given without parentheses.
    %   - The label is always typeset in math mode.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 06.08.2025
    % --------------------------------------------------------------------------

    % get coordinates
    \coordinate (from) at (#3);
    \coordinate (to) at (#4);
    
    \IfBooleanTF{#1}{
        % put the switch with or without optional parameters
	    \IfNoValueTF{#2}{\draw (from) to[cute closing switch, l_={$#5$}] (to);}{\draw (from) to[cute closing switch, l_={$#5$}, #2] (to);}
    }{
        % put the switch with or without optional parameters
	    \IfNoValueTF{#2}{\draw (from) to[cute closing switch, l={$#5$}] (to);}{\draw (from) to[cute closing switch, l={$#5$}, #2] (to);}
    }
}


%----------------------------
% Switch Closed
%----------------------------
\NewDocumentCommand{\SwClosed}{s o m m m}{
    % --------------------------------------------------------------------------
    % \SwClosed — Closed Switch with Label
    %
    % Syntax:
    %   \SwClosed[*][<circuitikz options>]{<from>}{<to>}{<label>}
    %
    % Description:
    %   Draws a closed switch (`cute opening switch` style in Circuitikz) between
    %   two coordinates, with an optional label and styling options. The label can
    %   be placed above or below the switch depending on whether the first argument
    %   is starred.
    %
    % Arguments:
    %   * (optional star)         — If present, the label is placed below the switch
    %                                (`l_=` in Circuitikz); otherwise, it is placed
    %                                above (`l=`).
    %   [<circuitikz options>]    — (Optional) Key-value options passed directly to
    %                                the Circuitikz switch element, e.g., `-*`, `color=red`.
    %   {<from>}          — Coordinates of the starting terminal, e.g., `0,0`.
    %   {<to>}            — Coordinates of the ending terminal, e.g., `2,0`.
    %   {<label>}                 — Mathematical label for the switch, e.g., `S_1`.
    %
    % Behaviour:
    %   - If no [<circuitikz options>] are given, uses the default `cute opening switch` style.
    %   - Starred form inverts label position (places it below the element).
    %   - Automatically applies `l=` or `l_=` to match label placement.
    %
    % Example:
    %   \begin{circuitikz}
    %       \SwClosed{0,0}{2,0}{S}
    %       \SwClosed*{0,-1}{2,-1}{S_L}
    %       \SwClosed[*][color=blue]{0,-2}{2,-2}{S_s}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be given without parentheses.
    %   - The label is always typeset in math mode.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 06.08.2025
    % --------------------------------------------------------------------------
    
    % get coordinates
    \coordinate (from) at (#3);
    \coordinate (to) at (#4);
    
    \IfBooleanTF{#1}{
        % put the switch with or without optional parameters
	    \IfNoValueTF{#2}{\draw (from) to[cute opening switch, l_={$#5$}] (to);}{\draw (from) to[cute opening switch, l_={$#5$}, #2] (to);}
    }{
        % put the switch with or without optional parameters
	    \IfNoValueTF{#2}{\draw (from) to[cute opening switch, l={$#5$}] (to);}{\draw (from) to[cute opening switch, l={$#5$}, #2] (to);}
    }
}

%----------------------------
% Short circuits
%----------------------------
\NewDocumentCommand{\Short}{o m m}{
	% --------------------------------------------------------------------------
    % \Short — Short Circuit Connection
    %
    % Syntax:
    %   \Short[<circuitikz options>]{<from>}{<to>}
    %
    % Description:
    %   Draws a short circuit (a direct conductor) between two coordinates
    %   using the Circuitikz `short` element, with optional styling or
    %   customization.
    %
    % Arguments:
    %   [<circuitikz options>]    — (Optional) Key-value options passed directly
    %                                to the Circuitikz `short` element, e.g.,
    %                                `-*`, `color=blue`.
    %   {<from>}          — Coordinates of the starting terminal, e.g., `0,0`.
    %   {<to>}            — Coordinates of the ending terminal, e.g., `2,0`.
    %
    % Behaviour:
    %   - If no [<circuitikz options>] are provided, defaults to a plain short
    %     connection.
    %   - Coordinates must be given without parentheses.
    %
    % Example:
    %   \begin{circuitikz}
    %       \Short{0,0}{2,0}
    %       \Short[*-*]{0,-1}{2,-1}
    %       \Short[i>^=$i$]{0,-2}{2,-2}
    %   \end{circuitikz}
    %
    % Notes:
    %   - This is a convenience wrapper for `to[short]` in Circuitikz.
    %    
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 29.07.2025
    % ----------------------------------------------------------------

	% get coordinates
	\coordinate (from) at (#2);
  	\coordinate (to) at (#3);

	% put the short circuit with or without optional parameters
	\IfNoValueTF{#1}{\draw (from) to[short] (to);}{\draw (from) to[short, #1] (to);}
}

%----------------------------
% Open circuits
%----------------------------
\NewDocumentCommand{\Open}{o m m}{
    % --------------------------------------------------------------------------
    % \Open — Open Circuit Connection
    %
    % Syntax:
    %   \Open[<circuitikz options>]{<from>}{<to>}
    %
    % Description:
    %   Draws an open circuit (a visible gap between terminals) between two
    %   coordinates using the Circuitikz `open` element, with optional styling
    %   or customization.
    %
    % Arguments:
    %   [<circuitikz options>]    — (Optional) Key-value options passed directly
    %                                to the Circuitikz `open` element, e.g.,
    %                                `o-o`, `color=red`.
    %   {<from>}          — Coordinates of the starting terminal, e.g., `0,0`.
    %   {<to>}            — Coordinates of the ending terminal, e.g., `2,0`.
    %
    % Behaviour:
    %   - If no [<circuitikz options>] are provided, defaults to a plain open
    %     connection.
    %   - Coordinates must be given without parentheses.
    %
    % Example:
    %   \begin{circuitikz}
    %       \Open{0,0}{2,0}
    %       \Open[o-o]{0,-1}{2,-1}
    %       \Open[v=$v$]{0,0}{2,0}
    %   \end{circuitikz}
    %
    % Notes:
    %   - This is a convenience wrapper for `to[open]` in Circuitikz.
    %    
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 29.07.2025
    % --------------------------------------------------------------------------
	
	% get coordinates
	\coordinate (from) at (#2);
  	\coordinate (to) at (#3);

	% put the open circuit with or without optional parameters
	\IfNoValueTF{#1}{\draw (from) to[open] (to);}{\draw (from) to[open, #1] (to);}
}

%----------------------------
% Independent voltage source
%----------------------------
\NewDocumentCommand{\Vs}{s o m m m}{
    % --------------------------------------------------------------------------
    % \Vs — Independent Voltage Source with from Sign and Label
    %
    % Syntax:
    %   \Vs[*][<circuitikz options>]{<from coords>}{<to coords>}{<label>}
    %
    % Description:
    %   Draws an independent voltage source between two coordinates in a Circuitikz
    %   diagram, optionally adding styling options, a side selection for the from sign,
    %   and a label positioned near the source.
    %
    % Arguments:
    %   * (optional star)       — If present, the from sign is placed on the opposite
    %                           side of the default (mirrors horizontally).
    %   [<circuitikz options>]  — (Optional) Key-value options passed directly to the 
    %                           Circuitikz
    %   {<from coords>}         — Coordinates of the positive terminal, e.g., `0,0`.
    %   {<to coords>}        — Coordinates of the negative terminal, e.g., `0,3`.
    %   {<label>}               — Mathematical label to display near the from sign, 
    %                           e.g., `E_1`.
    %
    % Behaviour:
    %   - If no [<options>] are provided, draws a default `V` element.
    %   - The star `*` in the first argument toggles the side on which the from sign
    %     and label appear.
    %   - Automatically computes the midpoint and orientation of the element to
    %     rotate the from sign correctly.
    %   - Places the label slightly offset from the from sign for clarity.
    %
    % Example:
    %   \begin{circuitikz}
    %       \Vs{0,0}{0,3}{E_0}
    %       \Vs*{2,0}{2,3}{E_1}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be given without parentheses.
    %   - This macro relies on Circuitikz and PGF/TikZ math to position the from sign.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 05.08.2025
    % --------------------------------------------------------------------------

    % get coordinates
	\coordinate (from) at (#4);
  	\coordinate (to) at (#3);

    % put the voltage source with or without optional parameters
	\IfNoValueTF{#2}{\draw (from) to[V] (to);}{\draw (from) to[V, #2] (to);}
    
    % select side for plus sign and label
    \IfBooleanTF{#1}{\def\side{-1}}{\def\side{1}}

    % draw the from sign
    \path let
        \p1 = (from),
        \p2 = (to),
        \p3 = ($(\p2)-(\p1)$),          % direction vector
        \n1 = {veclen(\x3,\y3)/28.45},  % length of the vector (in cm)
        \n2 = {atan2(\y3,\x3)},         % angle of the component
        % middle point
        \p4 = ($0.5*(\p1)+0.5*(\p2)$),
        % shift 
        \p5 = ($(\p4) + (0.5*\y3/\n1*\side, -0.5*\x3/\n1*\side)$),   % side shift (plus sign)
        \p6 = ($(\p5) + (-0.4*\x3/\n1, -0.4*\y3/\n1)$),   % axis shift (plus sign)
        \p7 = ($(\p4) + (0.8*\y3/\n1*\side, -0.8*\x3/\n1*\side)$)   % side shift (label)
    in
        node at (\p6) [rotate=\n2] {\textbf{+}}
        node at (\p7) [] {$#5$};
}

%----------------------------
% Independent current source
%----------------------------
\NewDocumentCommand{\Is}{s o m m m}{
	% --------------------------------------------------------------------------
    % \Is — Independent Current Source with Arrow and Label
    %
    % Syntax:
    %   \Is[*][<circuitikz options>]{<from coords>}{<to coords>}{<label>}
    %
    % Description:
    %   Draws an independent current source between two coordinates in a Circuitikz
    %   diagram, optionally adding styling options, a side selection for the arrow,
    %   and a label positioned near the source.
    %
    % Arguments:
    %   * (optional star)         — If present, the arrow and label are placed on the
    %                                opposite side of the default.
    %   [<circuitikz options>]    — (Optional) Key-value options passed directly to the 
    %                                Circuitikz `I` element, e.g., `-*`, etc.
    %   {<from coords>}           — Coordinates of the positive terminal, e.g., `0,0`.
    %   {<to coords>}          — Coordinates of the negative terminal, e.g., `0,3`.
    %   {<label>}                 — Mathematical label to display near the arrow, 
    %                                e.g., `I_s`.
    %
    % Behaviour:
    %   - If no [<circuitikz options>] are provided, draws a default `I` element.
    %   - The star `*` in the first argument toggles the side where the arrow and
    %     label are placed.
    %   - Automatically computes the midpoint and orientation of the element to
    %     draw the arrow correctly aligned with the source.
    %   - Places the label offset from the arrow for clarity.
    %
    % Example:
    %   \begin{circuitikz}
    %       \Is{0,0}{0,3}{I_0}
    %       \Is*{2,0}{2,3}{I_1}
    %       \Is{4,0}{4,3}{I_s}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be given without parentheses.
    %   - This macro relies on Circuitikz and PGF/TikZ math to position the arrow.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 05.08.2025
    % --------------------------------------------------------------------------

	% get coordinates
	\coordinate (from) at (#3);
  	\coordinate (to) at (#4);

	% put the current source with or without optional parameters
	\IfNoValueTF{#2}{\draw (from) to[I] (to);}{\draw (from) to[I,#2] (to);}

    % select side for arrow and label
    \IfBooleanTF{#1}{\def\side{-1}}{\def\side{1}}

  	% draw arrow and the label
  	\draw[-{Triangle[width=4.5pt, length=5pt]}] let
		\p1 = (from),
		\p2 = (to),
		\p3 = ($(\p2)-(\p1)$),          % direction vector
		\n1 = {veclen(\x3,\y3)/28.45},  % length of the vector (in cm)
		% middle point
		\p4 = ($0.5*(\p1)+0.5*(\p2)$),
		% shift 
		\p5 = ($(\p4) + (-0.4*\x3/\n1, -0.4*\y3/\n1) + (-0.65*\y3/\n1*\side, 0.65*\x3/\n1*\side)$),
		\p6 = ($(\p4) + (0.4*\x3/\n1, 0.4*\y3/\n1) + (-0.65*\y3/\n1*\side, 0.65*\x3/\n1*\side)$),
		\p7 = ($(\p4) + (-0.95*\y3/\n1*\side, 0.95*\x3/\n1*\side)$)
  		  in 
       (\p5) -- (\p6) node at (\p7) [] {$#5$};  % memo: \StrBehind{#2}{=} if you want to remove everithing before '='
}

%----------------------------
% Controlled voltage source
%----------------------------
\NewDocumentCommand{\cVs}{s o m m m}{
	% --------------------------------------------------------------------------
    % \cVs — Controlled Voltage Source with from Sign and Label
    %
    % Syntax:
    %   \cVs[*][<circuitikz options>]{<from coords>}{<to coords>}{<label>}
    %
    % Description:
    %   Draws an independent voltage source between two coordinates in a Circuitikz
    %   diagram, optionally adding styling options, a side selection for the from sign,
    %   and a label positioned near the source.
    %
    % Arguments:
    %   * (optional star)       — If present, the from sign is placed on the opposite
    %                           side of the default (mirrors horizontally).
    %   [<circuitikz options>]  — (Optional) Key-value options passed directly to the 
    %                           Circuitikz
    %   {<from coords>}         — Coordinates of the positive terminal, e.g., `0,0`.
    %   {<to coords>}        — Coordinates of the negative terminal, e.g., `0,3`.
    %   {<label>}               — Mathematical label to display near the from sign, 
    %                           e.g., `E_1`.
    %
    % Behaviour:
    %   - If no [<options>] are provided, draws a default `V` element.
    %   - The star `*` in the first argument toggles the side on which the from sign
    %     and label appear.
    %   - Automatically computes the midpoint and orientation of the element to
    %     rotate the from sign correctly.
    %   - Places the label slightly offset from the from sign for clarity.
    %
    % Example:
    %   \begin{circuitikz}
    %       \cVs{0,0}{0,3}{E_0}
    %       \cVs*{2,0}{2,3}{E_1}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be given without parentheses.
    %   - This macro relies on Circuitikz and PGF/TikZ math to position the from sign.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 06.08.2025
	% --------------------------------------------------------------------------

    % get coordinates
	\coordinate (from) at (#4);
  	\coordinate (to) at (#3);

    % put the voltage source with or without optional parameters
	\IfNoValueTF{#2}{\draw (from) to[cV] (to);}{\draw (from) to[cV, #2] (to);}
    
    % select side for plus sign and label
    \IfBooleanTF{#1}{\def\side{-1}}{\def\side{1}}

    % draw the from sign
    \path let
        \p1 = (from),
        \p2 = (to),
        \p3 = ($(\p2)-(\p1)$),          % direction vector
        \n1 = {veclen(\x3,\y3)/28.45},  % length of the vector (in cm)
        \n2 = {atan2(\y3,\x3)},         % angle of the component
        % middle point
        \p4 = ($0.5*(\p1)+0.5*(\p2)$),
        % shift 
        \p5 = ($(\p4) + (0.5*\y3/\n1*\side, -0.5*\x3/\n1*\side)$),   % side shift (plus sign)
        \p6 = ($(\p5) + (-0.4*\x3/\n1, -0.4*\y3/\n1)$),   % axis shift (plus sign)
        \p7 = ($(\p4) + (0.8*\y3/\n1*\side, -0.8*\x3/\n1*\side)$)   % side shift (label)
    in
        node at (\p6) [rotate=\n2] {\textbf{+}}
        node at (\p7) [] {$#5$};
}

%----------------------------
% Controlled current source
%----------------------------
\NewDocumentCommand{\cIs}{s o m m m}{
    % --------------------------------------------------------------------------
    % \cIs — Controlled Current Source with Arrow and Label
    %
    % Syntax:
    %   \cIs[*][<circuitikz options>]{<from coords>}{<to coords>}{<label>}
    %
    % Description:
    %   Draws an independent current source between two coordinates in a Circuitikz
    %   diagram, optionally adding styling options, a side selection for the arrow,
    %   and a label positioned near the source.
    %
    % Arguments:
    %   * (optional star)         — If present, the arrow and label are placed on the
    %                                opposite side of the default.
    %   [<circuitikz options>]    — (Optional) Key-value options passed directly to the 
    %                                Circuitikz `I` element, e.g., `-*`, etc.
    %   {<from coords>}           — Coordinates of the positive terminal, e.g., `0,0`.
    %   {<to coords>}          — Coordinates of the negative terminal, e.g., `0,3`.
    %   {<label>}                 — Mathematical label to display near the arrow, 
    %                                e.g., `I_s`.
    %
    % Behaviour:
    %   - If no [<circuitikz options>] are provided, draws a default `I` element.
    %   - The star `*` in the first argument toggles the side where the arrow and
    %     label are placed.
    %   - Automatically computes the midpoint and orientation of the element to
    %     draw the arrow correctly aligned with the source.
    %   - Places the label offset from the arrow for clarity.
    %
    % Example:
    %   \begin{circuitikz}
    %       \cIs{0,0}{0,3}{I_0}
    %       \cIs*{2,0}{2,3}{I_1}
    %       \cIs{4,0}{4,3}{I_s}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be given without parentheses.
    %   - This macro relies on Circuitikz and PGF/TikZ math to position the arrow.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 05.08.2025
    % ----------------------------------------------------------------
	% get coordinates
	\coordinate (from) at (#3);
  	\coordinate (to) at (#4);

	% put the current source with or without optional parameters
	\IfNoValueTF{#2}{\draw (from) to[cI] (to);}{\draw (from) to[cI,#2] (to);}

    % select side for arrow and label
    \IfBooleanTF{#1}{\def\side{-1}}{\def\side{1}}

  	% draw arrow and the label
  	\draw[-{Triangle[width=4.5pt, length=5pt]}] let
		\p1 = (from),
		\p2 = (to),
		\p3 = ($(\p2)-(\p1)$),          % direction vector
		\n1 = {veclen(\x3,\y3)/28.45},  % length of the vector (in cm)
		% middle point
		\p4 = ($0.5*(\p1)+0.5*(\p2)$),
		% shift 
		\p5 = ($(\p4) + (-0.4*\x3/\n1, -0.4*\y3/\n1) + (-0.65*\y3/\n1*\side, 0.65*\x3/\n1*\side)$),
		\p6 = ($(\p4) + (0.4*\x3/\n1, 0.4*\y3/\n1) + (-0.65*\y3/\n1*\side, 0.65*\x3/\n1*\side)$),
		\p7 = ($(\p4) + (-0.95*\y3/\n1*\side, 0.95*\x3/\n1*\side)$)
  		  in 
       (\p5) -- (\p6) node at (\p7) [] {$#5$};  % memo: \StrBehind{#2}{=} if you want to remove everithing before '='
}

%----------------------------
% Voltage
%----------------------------
\NewDocumentCommand{\V}{s m m m}{
    % --------------------------------------------------------------------------
    % \V — Voltage Indicator
    %
    % Syntax:
    %   \V*{<from>}{<to>}{<label>}
    %   \V {<from>}{<to>}{<label>}
    %
    % Description:
    %   Draws a voltahe between two coordinates and places a
    %   label either above or below the element, using Circuitikz's
    %   `v=` or `v^=` notation.
    %
    % Arguments:
    %   * (star)                 — (Optional) If present, places the voltage
    %                               label **below** the open element (`v=`).
    %                               If absent, the label is placed **above**
    %                               (`v^=`).
    %   {<from>}         — Coordinates of the starting terminal, e.g., `0,0`.
    %   {<to>}           — Coordinates of the ending terminal, e.g., `2,0`.
    %   {<label>}                — Voltage label content, in math mode without `$`.
    %
    % Behaviour:
    %   - Internally uses the `\Open` macro to draw the open element.
    %   - Starred form places the voltage label below; unstarred form above.
    %   - Coordinates must be given without parentheses.
    %
    % Example:
    %   \begin{circuitikz}
    %       % Voltage label above
    %       \V{0,0}{2,0}{V_1}
    %       % Voltage label below
    %       \V*{0,-1}{2,-1}{V_2}
    %   \end{circuitikz}
    %
    % Notes:
    %   - This is a convenience wrapper for quickly labeling voltages without
    %     manually adjusting `v=` or `v^=` options in Circuitikz.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 06.08.2025
    % --------------------------------------------------------------------------

    % get coordinates
    \coordinate (from) at (#2);
    \coordinate (to) at (#3);
    
    % draw the voltage
    \IfBooleanTF{#1}{
        \Open[v=$#4$]{from}{to}
    }{
        \Open[v^=$#4$]{from}{to}
    }
}

%----------------------------
% Current
%----------------------------
\NewDocumentCommand{\I}{s m m m}{
    % --------------------------------------------------------------------------
    % \I — Current Indicator
    %
    % Syntax:
    %   \I*{<from>}{<to>}{<label>}
    %   \I {<from>}{<to>}{<label>}
    %
    % Description:
    %   Draws a current arrow between two coordinates and places a label
    %   adjacent to the arrow. The star controls the side of the label and
    %   arrow offset.
    %
    % Arguments:
    %   * (star)                 — (Optional) If present, the arrow and label
    %                               are shifted to the opposite side relative
    %                               to the unstarred form.
    %   {<from>}         — Coordinates of the starting point, e.g., `0,0`.
    %   {<to>}           — Coordinates of the ending point, e.g., `2,0`.
    %   {<label>}                — Current label content, in math mode without `$`.
    %
    % Behaviour:
    %   - Draws a straight arrow from `<from>` to `<to>` using
    %     a filled triangular arrowhead.
    %   - Label is positioned near the midpoint, shifted perpendicular to
    %     the arrow direction. Starred form mirrors the shift.
    %   - Coordinates must be given without parentheses.
    %
    % Example:
    %   \begin{circuitikz}
    %       % Label on the default side
    %       \I{0,0}{2,0}{I_1}
    %
    %       % Label mirrored to the opposite side
    %       \I*{0,-1}{2,-1}{I_2}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Intended for use when annotating branch currents without placing a
    %     circuit element.
    %   - The label position logic is based on vector calculations so it works
    %     in any arrow orientation.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 06.08.2025
    % --------------------------------------------------------------------------

    % get coordinates
	\coordinate (from) at (#2);
  	\coordinate (to) at (#3);
    
    % select side for arrow and label
    \IfBooleanTF{#1}{\def\side{-1}}{\def\side{1}}

     % draw arrow and the label
  	\draw[-{Triangle[width=4.5pt, length=5pt]}] let
		\p1 = (from),
		\p2 = (to),
        \p3 = ($(\p2)-(\p1)$),          % direction vector
		\n1 = {veclen(\x3,\y3)/28.45},  % length of the vector (in cm)
		% middle point
		\p4 = ($0.5*(\p1)+0.5*(\p2)$),
		% shift 
		\p4 = ($(\p4) + (-0.35*\y3/\n1*\side, 0.35*\x3/\n1*\side)$)
  		  in 
       (\p1) -- (\p2) node at (\p4) [] {$#4$};  % memo: \StrBehind{#2}{=} if you want to remove everithing before '='

}

%--------------------------------
% Nodes
%--------------------------------
\makeatletter
\NewDocumentCommand{\Nodes}{s m}{
    % --------------------------------------------------------------------------
    % \Nodes — Multiple Node Placement
    %
    % Syntax:
    %   \Nodes*{<coords1>}{<coords2>}...{<coordsN>}
    %   \Nodes {<coords1>}{<coords2>}...{<coordsN>}
    %
    % Description:
    %   Places one or more circuitikz nodes at specified coordinates. The macro
    %   accepts an indefinite number of coordinate arguments and draws each
    %   node using either a filled or unfilled style depending on whether the
    %   starred form is used.
    %
    % Arguments:
    %   * (star)                 — (Optional) If present, draws open-circle
    %                               nodes (`ocirc`). If omitted, draws filled
    %                               black-circle nodes (`circ`).
    %   {<coordsX>}              — Coordinates where the node will be placed,
    %                               given without parentheses, e.g., `0,0`.
    %                               Multiple coordinates can be supplied by
    %                               repeating `{<coords>}` blocks.
    %
    % Behaviour:
    %   - Starred form uses the TikZ `ocirc` style for open terminal symbols.
    %   - Unstarred form uses the TikZ `circ` style for filled terminal symbols.
    %   - Each coordinate argument is processed in sequence with no limit on
    %     the number of points.
    %
    % Example:
    %   \begin{circuitikz}
    %       % Filled terminals
    %       \Nodes{0,0}{2,0}{4,0}
    %
    %       % Open terminals
    %       \Nodes*{0,-1}{2,-1}{4,-1}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Useful for marking multiple connection points without repeating the
    %     `\node` or `\draw` command.
    %   - Coordinates must be passed as `{x,y}` without surrounding parentheses.
    %
    % Authors: Fabio Freschi (fabio.freschi@polito.it)
    %          Luca Giaccone (luca.giaccone@polito.it)
    % Date: 06.08.2025
    % --------------------------------------------------------------------------


    % pick fill color once
    \IfBooleanTF{#1}{%
        \def\nodes@fill{ocirc}%
    }{%
        \def\nodes@fill{circ}%
    }%
    % draw the first node & recurse
    \Nodes@i{#2}%
    }

    % internal worker: draw one node, then recurse if next token is {
    \newcommand{\Nodes@i}[1]{%
    \draw (#1) node[\nodes@fill] {};%
    \@ifnextchar\bgroup
        {\Nodes@i}%
        {}%
}
\makeatother

%----------------------------
% Terminal
%----------------------------
\NewDocumentCommand{\Terminal}{m m m}{
    % --------------------------------------------------------------------------
    % \Terminal — Draw Terminal with Label
    %
    % Syntax:
    %   \Terminal{<coord1>}{<coord2>}{<label>}
    %
    % Description:
    %   Draws a short circuit segment with a circular "o" terminal at the
    %   starting coordinate, extending toward the ending coordinate, and
    %   places a label near the terminal.  
    %   Useful for marking connection points or ports in circuit diagrams.
    %
    % Arguments:
    %   {<coord1>}      — Starting coordinate of the terminal (terminal side).
    %   {<coord2>}      — Ending coordinate of the short segment.
    %   {<label>}       — Mathematical label to be placed near the terminal.
    %
    % Behaviour:
    %   - The connection between `<coord1>` and `<coord2>` is drawn as a short
    %     circuit with a visible terminal symbol (`o-`) at the starting point.
    %   - The terminal’s label is positioned slightly offset from the terminal
    %     in the direction of the segment to avoid overlap.
    %   - The label is rendered in math mode (`$...$`).
    %
    % Example:
    %   \begin{circuitikz}
    %       % Terminal from (0,0) to (1,0) labeled "A"
    %       \Terminal{0,0}{1,0}{A}
    %
    %       % Terminal from (2,1) to (3,1) labeled "V_{in}"
    %       \Terminal{2,1}{3,1}{V_{in}}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be specified without parentheses, e.g., `0,0`.
    %   - The label positioning offset is fixed for consistent appearance.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 06.08.2025
    % --------------------------------------------------------------------------

    
    % get coordinates
	\coordinate (from) at (#1);
  	\coordinate (to) at (#2);

	% put the resistor with or without optional parameters
	\draw (from) to[short, o-, nodes width=0.06] (to);

    % put the label
    \path let
        \p1 = (from),
        \p2 = (to),
        \p3 = ($(\p1)-(\p2)$),          % direction vector
        \n1 = {veclen(\x3,\y3)/28.45},  % length of the vector (in cm)
        % shift 
        \p4 = ($(\p1) + (\x3/\n1*11/28.45, \y3/\n1*11/28.45)$)   % axis shift (9pt)
    in
        node at (\p4) [] {$#3$};

}

%----------------------------
% Label
%----------------------------
\NewDocumentCommand{\Label}{o m m}{
    % --------------------------------------------------------------------------
    % \Label — Place a text label at a given coordinate
    %
    % Syntax:
    %   \Label [<node options>] {<coordinate>} {<text>}
    %
    % Description:
    %   Places a text label at a specific coordinate in a TikZ or Circuitikz
    %   diagram. Optional TikZ node options can be provided to control the
    %   appearance and positioning of the label.
    %
    % Arguments:
    %   [<node options>]  — Optional TikZ node styling options (e.g., `above`,
    %                        `right`, `font=\small\itshape`). If omitted, the label
    %                        is placed with default node settings.
    %   {<coordinate>}    — Coordinate where the label will be placed (e.g., `2,1`).
    %   {<text>}          — The text to display as the label.
    %
    % Behaviour:
    %   - Without `[<node options>]`, places the label exactly at the given
    %     coordinate.
    %   - With `[<node options>]`, applies the specified TikZ node styling and
    %     positioning.
    %
    % Example:
    %   \begin{circuitikz}
    %       % Default label
    %       \Label{2,0}{$V_{out}$}
    %
    %       % Label with custom position and style
    %       \Label[above,font=\small\bfseries]{2,0}{$V_{out}$}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be given without parentheses in the macro call.
    %   - Text can include math mode delimiters (`$...$`) if needed.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 06.08.2025
    % --------------------------------------------------------------------------

    \IfNoValueTF{#1}{
        \node at (#2) {#3};
    }{
        \node at (#2) [#1] {#3};
    }

}

%----------------------------
% Power Load
%----------------------------
\NewDocumentCommand{\PLoad}{o o m m m}{
    % --------------------------------------------------------------------------
    % \PLoad — Draw a Power Load Block
    %
    % Syntax:
    %   \PLoad[<label1>][<label2>]{<width>}{<height>}{<center>}
    %
    % Description:
    %   Draws a solid rectangular block representing a power load in a
    %   circuit diagram, either vertically or horizontally oriented based
    %   on its proportions. Labels can be placed inside the block, either
    %   as two separate entries or a single centered one.
    %
    % Arguments:
    %   [<label1>]       — (Optional) First label. If <label2> is also provided,
    %                       <label1> appears at the upper (vertical) or left
    %                       (horizontal) side of the block. If only <label1>
    %                       is provided, it is centered in the block.
    %   [<label2>]       — (Optional) Second label. Used only if <label1> is
    %                       also provided, positioned at the lower (vertical)
    %                       or right (horizontal) side of the block.
    %   {<width>}        — Width of the block.
    %   {<height>}       — Height of the block.
    %   {<center>}       — Coordinate of the block's center (without parentheses).
    %
    % Behaviour:
    %   - If `<height>` > `<width>`, the block is drawn vertically; otherwise,
    %     it is drawn horizontally.
    %   - For vertical blocks:
    %       * With two labels: `<label1>` at upper center, `<label2>` at lower center.
    %       * With one label: centered.
    %   - For horizontal blocks:
    %       * With two labels: `<label1>` at left center, `<label2>` at right center.
    %       * With one label: centered.
    %   - The rectangle is drawn with `line width=1.2pt` for emphasis.
    %
    % Example:
    %   \begin{circuitikz}
    %       % Vertical load, single label
    %       \PLoad[Q_c]{1}{2}{0,0}
    %
    %       % Vertical load, two labels
    %       \PLoad[P][Q]{1}{3}{3,0}
    %
    %       % Horizontal load, single label
    %       \PLoad[P]{3}{1}{0,-3}
    %
    %       % Horizontal load, two labels
    %       \PLoad[P_1][Q_1]{4}{1}{4,-3}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates for `<center>` must be given without parentheses (e.g., `0,0`).
    %   - Labels are rendered in math mode (`$...$`).
    %   - Automatic orientation is determined from the `<width>` and `<height>`.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 07.078.2025
    % --------------------------------------------------------------------------
    
    \ifdim #4pt > #3pt
        % vertical block
        \draw[line width=1.2pt] ($(#5) + (0, -#4/2)$) rectangle ($(#5) + (#3, #4/2)$);


        \IfValueT{#1}{
            \IfValueT{#2}{
                \draw node at ($(#5) + (#3/2, #4/4)$) {$#1$};
                \draw node at ($(#5) + (#3/2, -#4/4)$) {$#2$};
            }
        }
        \IfValueT{#1}{
            \IfNoValueT{#2}{
                \draw node at ($(#5) + (#3/2, 0)$) {$#1$};
            }
        }
    \else
        % horizontal block
        \draw[line width=1.2pt] ($(#5) + (-#3/2, 0)$) rectangle ($(#5) + (#3/2, -#4)$);
        \IfValueT{#1}{
            \IfValueT{#2}{
                \draw node at ($(#5) + (-#3/4, -#4/2)$) {$#1$};
                \draw node at ($(#5) + (#3/4, -#4/2)$) {$#2$};
            }
        }
        \IfValueT{#1}{
            \IfNoValueT{#2}{
                \draw node at ($(#5) + (0, -#4/2)$) {$#1$};
            }
        }
        
    \fi
}

%----------------------------
% star connected load
%----------------------------
\NewDocumentCommand{\YLoad}{s O{1} O{B} m m m m m m}{
    % --------------------------------------------------------------------------
    % \YLoad — Draw a Star (Y) Connected Load
    %
    % Syntax:
    %   \YLoad* [<scale>] [<bipole type>] {<coord1>} {<coord2>} {<gap>}
    %          {<label-phase3>} {<label-phase2>} {<label-phase1>}
    %
    % Description:
    %   Draws a three-phase star-connected (Y) load using Circuitikz. Each branch
    %   can be of a generic component type (impedance, resistor, inductor, capacitor)
    %   and can have individual phase labels. The neutral point is indicated with a
    %   circular node.
    %
    % Arguments:
    %   * (star)         — Optional boolean form. If given, phase labels are placed
    %                      on the *opposite* side (using `l_=`). Otherwise, labels
    %                      are placed on the default side (using `l=`).
    %   [<bipole type>]  — (Optional) Determines the type of component drawn in each
    %                      phase. Possible values:
    %                          B — generic impedance (default)
    %                          R — resistor
    %                          L — inductor
    %                          C — capacitor
    %   {<scale>}       — Nominal branch length, scaled internally by 1.4 to set
    %                      `bipoles/length` in cm.
    %   {<coord1>}       — Coordinate of the outer connection point for phase 2.
    %   {<coord2>}       — Coordinate of the neutral connection point for phase 2.
    %   {<gap>}          — Perpendicular offset from the main axis to define the
    %                      outer connection points of phase 1 and phase 3.
    %   {<label-phase3>} — Label for phase 3 branch, in math mode.
    %   {<label-phase2>} — Label for phase 2 branch, in math mode.
    %   {<label-phase1>} — Label for phase 1 branch, in math mode.
    %
    % Behaviour:
    %   - The macro automatically computes branch endpoints for phases 1 and 3
    %     by offsetting the main axis defined by `<coord1>` and `<coord2>`.
    %   - The `<length>` parameter is scaled by a factor of 1.4 to match visual
    %     proportions.
    %   - Phase labels are positioned based on the presence of the optional star
    %     argument (`*`).
    %   - The neutral point is drawn as a filled circle and phases 1 and 3 are
    %     connected to it.
    %
    % Example:
    %   \begin{circuitikz}
    %       % Default (generic impedance), labels on default side
    %       \YLoad{3}{0,0}{0,-3}{1}{Z_a}{Z_b}{Z_c}
    %
    %       % With resistor branches, labels on opposite side
    %       \YLoad*[R]{3}{2,0}{2,-3}{1}{R_a}{R_b}{R_c}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be provided without parentheses.
    %   - Labels are in math mode automatically (`$...$` not required in input).
    %   - `<gap>` controls how far phases 1 and 3 are from phase 2 axis.
    %    
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 07.078.2025
    % --------------------------------------------------------------------------


    % select side for label
    \IfBooleanTF{#1}{\def\side{l_}}{\def\side{l}}
    % scale length
    \pgfmathsetmacro{\scaledlength}{#2 * 1.4}
    % select bipole
    \IfSubStr{#3}{B}{
        \def\bipole{generic}
    }{
        \IfSubStr{#3}{R}{
            \def\bipole{R}
        }{
            \IfSubStr{#3}{L}{
                \def\bipole{L}
            }{
                \IfSubStr{#3}{C}{
                    \def\bipole{C}
                }{
                    % do nothing here
                }
            }

        }
    }

    % get coordinates
	\coordinate (from) at (#4);
  	\coordinate (to) at (#5);

    % draw
    \draw let
        \p1 = (from),
        \p2 = (to),
        \p3 = ($(\p2)-(\p1)$),          % direction vector
        \n1 = {veclen(\x3,\y3)/28.45},  % length of the vector (in cm)
        \p4 = ($(\p1) + (#6*\y3/\n1, -#6*\x3/\n1)$),   % phase 1 start
        \p5 = ($(\p2) + (#6*\y3/\n1, -#6*\x3/\n1)$),   % phase 1 end
        \p6 = ($(\p1) + (-#6*\y3/\n1, #6*\x3/\n1)$),   % phase 1 start
        \p7 = ($(\p2) + (-#6*\y3/\n1, #6*\x3/\n1)$)   % phase 1 end
    in
        (\p4) to[\bipole, \side=$#9$, bipoles/length=\scaledlength cm] (\p5)
        (\p1) to[\bipole, \side=$#8$, bipoles/length=\scaledlength cm] (\p2)
        (\p6) to[\bipole, \side=$#7$, bipoles/length=\scaledlength cm] (\p7)
        (\p5) -- (\p7)
        (\p2) node[circ] {};
}

%----------------------------
% triangle connected load
%----------------------------
\NewDocumentCommand{\DLoad}{s O{1} O{B}  m m m m m m}{
    % --------------------------------------------------------------------------
    % \DLoad — Draw a Delta (Δ) Connected Load
    %
    % Syntax:
    %   \DLoad* [<scale>] [<bipole type>] {<coord1>} {<coord2>} {<gap>}
    %          {<label-branch2>} {<label-branch1>} {<label-branch3>}
    %
    % Description:
    %   Draws a three-phase delta-connected (Δ) load using Circuitikz. Each side
    %   of the triangle can be a generic impedance, resistor, inductor, or capacitor,
    %   and each branch can have an individual label.
    %
    % Arguments:
    %   * (star)         — Optional boolean form. If given, branch labels are placed
    %                      on the *opposite* side (using `l_=`). Otherwise, labels
    %                      are placed on the default side (using `l=`).
    %   [<bipole type>]  — (Optional) Type of component in each branch:
    %                          B — generic impedance (default)
    %                          R — resistor
    %                          L — inductor
    %                          C — capacitor
    %   {<scale>}       — Nominal branch length, scaled internally by 1.4 to set
    %                      `bipoles/length` in cm.
    %   {<coord1>}       — Coordinate of one end of the main delta axis.
    %   {<coord2>}       — Coordinate of the other end of the main delta axis.
    %   {<gap>}  — Perpendicular offset from the main axis to position
    %                      the upper and lower vertices of the triangle.
    %   {<label-branch2>} — Label for branch between the central vertex and the upper vertex.
    %   {<label-branch1>} — Label for branch between the central vertex and the lower vertex.
    %   {<label-branch3>} — Label for branch between the upper and lower vertices.
    %
    % Behaviour:
    %   - The macro computes the triangle vertices from the given axis and
    %     `<gap>`, then connects them with the selected `<bipole type>`.
    %   - `<length>` controls the size of each branch and is scaled internally
    %     for visual proportions.
    %   - Labels are placed according to the star-argument (`*`).
    %   - The three branches correspond to the three sides of the Δ connection:
    %       • Branch 1: upper vertex to central vertex
    %       • Branch 2: central vertex to lower vertex
    %       • Branch 3: upper vertex to lower vertex
    %
    % Example:
    %   \begin{circuitikz}
    %       % Default (generic impedance), labels on default side
    %       \DLoad{3}{0,0}{3,0}{1}{Z_{ab}}{Z_{bc}}{Z_{ca}}
    %
    %       % With resistors and opposite-side labels
    %       \DLoad*[R]{3}{5,0}{8,0}{1}{R_{ab}}{R_{bc}}{R_{ca}}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be written without parentheses.
    %   - Labels are automatically typeset in math mode.
    %   - `<gap>` determines the triangle’s height relative to the base axis.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 07.078.2025
    % --------------------------------------------------------------------------

    % select side for label
    \IfBooleanTF{#1}{\def\side{l_}}{\def\side{l}}
    % define shift
    \pgfmathsetmacro{\shift}{#6 * 0.5}
    % scale length
    \pgfmathsetmacro{\scaledlength}{#2 * 1.4}
    % select bipole
    \IfSubStr{#3}{B}{
        \def\bipole{generic}
    }{
        \IfSubStr{#3}{R}{
            \def\bipole{R}
        }{
            \IfSubStr{#3}{L}{
                \def\bipole{L}
            }{
                \IfSubStr{#3}{C}{
                    \def\bipole{C}
                }{
                    % do nothing here
                }
            }

        }
    }

    % get coordinates
	\coordinate (from) at (#4);
  	\coordinate (to) at (#5);

    % draw
    \draw let
        \p1 = (from),
        \p2 = (to),
        \p3 = ($(\p2)-(\p1)$),          % direction vector
        \n1 = {veclen(\x3,\y3)/28.45},  % length of the vector (in cm)
        \p4 = ($(\p1) + (0.4*\x3, 0.4*\y3) + (#6*\y3/\n1, -#6*\x3/\n1)$),
        \p5 = ($(\p1) + (0.4*\x3, 0.4*\y3)$),
        \p6 = ($(\p1) + (0.4*\x3, 0.4*\y3) + (-#6*\y3/\n1, #6*\x3/\n1)$),
        \p7 = ($(\p2) + (#6*\y3/\n1, -#6*\x3/\n1)$),
        \p8 = ($(\p2) + (-#6*\y3/\n1, #6*\x3/\n1)$)
    in
        (\p4) to[\bipole, \side=$#8$, bipoles/length=\scaledlength cm] (\p5)
        (\p5) to[\bipole, \side=$#7$, bipoles/length=\scaledlength cm] (\p6)
        (\p7) to[\bipole, \side=$#9$, bipoles/length=\scaledlength cm] (\p8)
        ($(\p1) + (#6*\y3/\n1, -#6*\x3/\n1)$) -- (\p7)
        ($(\p1) + (-#6*\y3/\n1, #6*\x3/\n1)$) -- (\p8)
        (\p1) -- (\p5);
}

%----------------------------
% three phase line
%----------------------------
\NewDocumentCommand{\triLine}{s O{1} O{B} m m m m m m}{
    % --------------------------------------------------------------------------
    % \triLine — Draw a Three-Phase Transmission Line
    %
    % Syntax:
    %   \triLine* [<scale>] [<bipole type>] {<coord1>} {<coord2>} {<gap>}
    %            {<label phase A>} {<label phase B>} {<label phase C>}
    %
    % Description:
    %   Draws a three-phase line composed of three parallel bipoles (e.g., generic,
    %   resistor, inductor, capacitor), equally spaced and oriented perpendicularly
    %   to the main axis defined by two coordinates. Each phase is labelled
    %   independently and the element length is scaled according to {<scale>}.
    %
    % Arguments:
    %   * (star)               — Optional boolean form. If present, places labels
    %                             on the opposite side of the bipoles.
    %   [<bipole type>]        — Optional bipole type selector:
    %                             - `B` (default): generic bipole
    %                             - `R`: resistor
    %                             - `L`: inductor
    %                             - `C`: capacitor
    %   {<scale>}             — Nominal scale of each bipole (in cm) before scaling.
    %                             Actual length = {<length>} × 1.4.
    %   {<coord1>}             — First coordinate of the main axis (start point).
    %   {<coord2>}             — Second coordinate of the main axis (end point).
    %   {<gap>}                — Perpendicular distance from the main axis to each
    %                             outer phase (in cm).
    %   {<label phase A>}      — Label for the central phase (coordinate {<coord1>}→{<coord2>}).
    %   {<label phase B>}      — Label for the upper phase.
    %   {<label phase C>}      — Label for the lower phase.
    %
    % Behaviour:
    %   - Computes axis and perpendicular directions from the two given coordinates.
    %   - Draws three bipoles:
    %       1. Upper phase, offset by +<offset>.
    %       2. Central phase along the axis.
    %       3. Lower phase, offset by –<offset>.
    %   - Scales each bipole’s length according to the scaling factor (1.4).
    %   - Labels each phase with the provided labels on the chosen side.
    %
    % Example:
    %   \begin{circuitikz}
    %       % Three-phase line with resistors, labels above, length 2 cm, offset 1.5 cm
    %       \triLine[R]{2}{0,0}{4,0}{1.5}{$R_a$}{$R_b$}{$R_c$}
    %
    %       % Three-phase line with inductors, labels below (star form)
    %       \triLine*[L]{2}{0,0}{4,0}{1.5}{$L_a$}{$L_b$}{$L_c$}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be given without parentheses.
    %   - The <bipole type> applies to all three phases.
    %   - Labels are optional; omit if not needed.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 07.078.2025
    % --------------------------------------------------------------------------



    % select side for label
    \IfBooleanTF{#1}{\def\side{l_}}{\def\side{l}}
    % scale length
    \pgfmathsetmacro{\scaledlength}{#2 * 1.4}
    % select bipole
    \IfSubStr{#3}{B}{
        \def\bipole{generic}
    }{
        \IfSubStr{#3}{R}{
            \def\bipole{R}
        }{
            \IfSubStr{#3}{L}{
                \def\bipole{L}
            }{
                \IfSubStr{#3}{C}{
                    \def\bipole{C}
                }{
                    % do nothing here
                }
            }

        }
    }

    % get coordinates
	\coordinate (from) at (#4);
  	\coordinate (to) at (#5);

    % draw
    \draw let
        \p1 = (from),
        \p2 = (to),
        \p3 = ($(\p2)-(\p1)$),          % direction vector
        \n1 = {veclen(\x3,\y3)/28.45},  % length of the vector (in cm)
        \p4 = ($(\p1) + (#6*\y3/\n1, -#6*\x3/\n1)$),   % phase 1 start
        \p5 = ($(\p2) + (#6*\y3/\n1, -#6*\x3/\n1)$),   % phase 1 end
        \p6 = ($(\p1) + (-#6*\y3/\n1, #6*\x3/\n1)$),   % phase 1 start
        \p7 = ($(\p2) + (-#6*\y3/\n1, #6*\x3/\n1)$)   % phase 1 end
    in
        (\p4) to[\bipole, \side=$#9$, bipoles/length=\scaledlength cm] (\p5)
        (\p1) to[\bipole, \side=$#8$, bipoles/length=\scaledlength cm] (\p2)
        (\p6) to[\bipole, \side=$#7$, bipoles/length=\scaledlength cm] (\p7);
}


%----------------------------
% three-phase generator
%----------------------------
\NewDocumentCommand{\triGen}{s O{1} O{V} m m m m m m}{
    % --------------------------------------------------------------------------
    % \triGen — Draw a Three-Phase Generator (Voltage or Current Source)
    %
    % Syntax:
    %   \triGen* [<scale>] [<source type>] {<coord1>} {<coord2>} {<gap>}
    %           {<label-phaseA>} {<label-phaseB>} {<label-phaseC>}
    %
    % Description:
    %   Draws a balanced three-phase generator, either as a set of three
    %   voltage sources or three current sources, with optional star-argument
    %   to flip label/arrow sides.
    %
    % Arguments:
    %   * (star)          — Optional boolean form. If present, labels (and
    %                        arrow orientations for current sources) are flipped.
    %   [<source type>]   — Optional type of source:
    %                           V — voltage source (default)
    %                           I — current source
    %   [<scale>]        — Scaling factor for source length, multiplied internally
    %                        by 1.4 to set `bipoles/length` in cm (default: 1).
    %   {<coord1>}        — First coordinate of the generator axis.
    %   {<coord2>}        — Second coordinate of the generator axis.
    %   {<gap>}           — Perpendicular offset for phase connections relative to axis.
    %   {<label-phaseA>}  — Label for phase between upper node and offset terminal.
    %   {<label-phaseB>}  — Label for phase between axis nodes.
    %   {<label-phaseC>}  — Label for phase between lower node and offset terminal.
    %
    % Behaviour:
    %   - Computes perpendicular offsets from the axis to place the three
    %     generator elements evenly spaced at ±offset positions.
    %   - Depending on `<source type>`:
    %       • V: calls `\Vs` macro for each phase
    %       • I: calls `\Is` macro for each phase
    %   - Star-form (`*`) flips the label or arrow orientation.
    %   - A short connection is drawn between two upper-phase points.
    %   - A node is placed at the central axis coordinate.
    %
    % Example:
    %   \begin{circuitikz}
    %       % Default: voltage source, length=1, labels on default side
    %       \triGen{0,0}{3,0}{1.2}{E_a}{E_b}{E_c}
    %
    %       % Current source version, flipped labels
    %       \triGen*[I]{0,0}{3,0}{1.2}{I_a}{I_b}{I_c}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be written without parentheses.
    %   - Labels are automatically placed in math mode.
    %   - `<offset>` determines phase separation; `<length>` scales source size.
    % 
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 08.078.2025
    % --------------------------------------------------------------------------

    % scale length
    \pgfmathsetmacro{\scaledlength}{#2 * 1.4}
    
    % get coordinates
	\coordinate (from) at (#4);
  	\coordinate (to) at (#5);

    % draw the from sign
    \draw let
        \p1 = (from),
        \p2 = (to),
        \p3 = ($(\p2)-(\p1)$),          % direction vector
        \n1 = {veclen(\x3,\y3)/28.45},  % length of the vector (in cm)
        \p4 = ($(\p1) + (#6*\y3/\n1, -#6*\x3/\n1)$),   % phase 1 start
        \p5 = ($(\p2) + (#6*\y3/\n1, -#6*\x3/\n1)$),   % phase 1 end
        \p6 = ($(\p1) + (-#6*\y3/\n1, #6*\x3/\n1)$),   % phase 1 start
        \p7 = ($(\p2) + (-#6*\y3/\n1, #6*\x3/\n1)$)   % phase 1 end
    in
        \pgfextra{
        \coordinate (P1) at (\p1);
        \coordinate (P2) at (\p2);
        \coordinate (P4) at (\p4);
        \coordinate (P5) at (\p5);
        \coordinate (P6) at (\p6);
        \coordinate (P7) at (\p7);
    };

    % select bipole
    \IfSubStr{#3}{V}{
        \IfBooleanTF{#1}{
            \Vs*[bipoles/length=\scaledlength cm]{P6}{P7}{#7}
            \Vs*[bipoles/length=\scaledlength cm]{P1}{P2}{#8}
            \Vs*[bipoles/length=\scaledlength cm]{P4}{P5}{#9}
        }{
            \Vs[bipoles/length=\scaledlength cm]{P6}{P7}{#7}
            \Vs[bipoles/length=\scaledlength cm]{P1}{P2}{#8}
            \Vs[bipoles/length=\scaledlength cm]{P4}{P5}{#9}}
    }{
        \IfSubStr{#3}{I}{
            \IfBooleanTF{#1}{
                \Is*{P6}{P7}{#7}
                \Is*{P1}{P2}{#8}
                \Is*{P4}{P5}{#9}
            }{
                \Is{P6}{P7}{#7}
                \Is{P1}{P2}{#8}
                \Is{P4}{P5}{#9}}
        }{
            % do nothing here   
        }
    }

    \Short{P6}{P4}
    \Nodes{P1}

}

%-------------------------------
% three phase connection (Short)
%-------------------------------
\NewDocumentCommand{\triShort}{s o o m m m}{
    % --------------------------------------------------------------------------
    % \triShort — Draw a Three-Phase Short Connection
    %
    % Syntax:
    %   \triShort* [<circuitikz options>] [<cut>] {<coord1>} {<coord2>} {<offset>}
    %
    % Description:
    %   Draws a short-circuit representation for a three-phase connection, with
    %   three parallel shorts placed between pairs of points offset perpendicularly
    %   from a central axis. Can optionally flip sides and add a longitudinal gap.
    %
    % Arguments:
    %   * (star)              — Optional boolean form. If present, flips the
    %                            side on which the perpendicular offsets are placed.
    %   [<circuitikz options>] — Optional key–value options passed to each `\Short`
    %                            element (e.g., `line width=1pt`, `color=red`).
    %   [<cut>]               — Optional longitudinal cut along the axis (in cm)
    %                            between the main reference coordinate and where
    %                            the shorts are actually drawn. Default: 0.
    %   {<coord1>}            — First coordinate of the main axis (start point).
    %   {<coord2>}            — Second coordinate of the main axis (end point).
    %   {<offset>}            — Perpendicular distance from axis to each phase (in cm).
    %
    % Behaviour:
    %   - Computes the axis direction and perpendicular vectors from {<coord1>} to
    %     {<coord2>}.
    %   - Places three shorts: one in the middle (axis), one above, and one below,
    %     each offset by `<offset>` from the axis.
    %   - `<gap>` shifts the connection points of the shorts along the axis without
    %     altering the perpendicular spacing.
    %   - Star-form (`*`) reverses the perpendicular offset direction (mirror).
    %
    % Example:
    %   \begin{circuitikz}
    %       \begin{circuitikz}
    %           \triShort{0,0}{3,0}{2}
    %           \triShort[*-][1]{7,2}{7,-3}{1}
    %           \triShort*[*-][1]{12,2}{12,-2}{1}
    %       \end{circuitikz}
    %   \end{circuitikz}
    %
    % Notes:
    %   - Coordinates must be written without parentheses.
    %   - The `<circuitikz options>` argument applies identically to all three shorts.
    %   - `<offset>` controls phase separation; `<gap>` controls longitudinal spacing.
    %
    % Author: Luca Giaccone (luca.giaccone@polito.it)
    % Date: 08.078.2025
    % --------------------------------------------------------------------------

    % get coordinates
	\coordinate (from) at (#4);
  	\coordinate (to) at (#5);

    \IfNoValueTF{#3}{
        \pgfmathsetmacro{\gap}{0}
    }{
        \pgfmathsetmacro{\gap}{#3}
    }
    \IfBooleanTF{#1}{
        \pgfmathsetmacro{\swap}{-1}
    }{
        \pgfmathsetmacro{\swap}{1}
    }

    % compute coordinates
    \draw let
        \p1 = (from),
        \p2 = (to),
        \p3 = ($(\p2)-(\p1)$),          % direction vector
        \n1 = {veclen(\x3,\y3)/28.45},  % length of the vector (in cm)
        \p4 = ($(\p1) + (#6*\y3/\n1*\swap, -#6*\x3/\n1*\swap)$),   % phase 1 start
        \p5 = ($(\p2) + (#6*\y3/\n1*\swap, -#6*\x3/\n1*\swap)$),   % phase 1 end
        \p6 = ($(\p1) + (-#6*\y3/\n1*\swap, #6*\x3/\n1*\swap)$),   % phase 1 start
        \p7 = ($(\p2) + (-#6*\y3/\n1*\swap, #6*\x3/\n1*\swap)$)   % phase 1 end
    in
        \pgfextra{
        \coordinate (P1) at ($(\p1) + (\gap*\x3/\n1, \gap*\y3/\n1)$);
        \coordinate (P2) at (\p2);
        \coordinate (P4) at (\p4);
        \coordinate (P5) at (\p5);
        \coordinate (P6) at ($(\p6) + (2*\gap*\x3/\n1, 2*\gap*\y3/\n1)$);
        \coordinate (P7) at (\p7);
    };

    
    % draw
    \Short[#2]{P6}{P7}
    \Short[#2]{P1}{P2}
    \Short[#2]{P4}{P5}
    
}
